{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/mnt/c/Users/lkkar/Desktop/fe-starter/src/lib/with-apollo-client.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport initApollo from './init-apollo';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\nexport default (App => {\n  var _class, _temp;\n\n  return _temp = _class = class Apollo extends React.Component {\n    static async getInitialProps(ctx) {\n      const {\n        Component,\n        router\n      } = ctx;\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      } // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n\n\n      const apollo = initApollo();\n\n      if (!process.browser) {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(__jsx(App, _extends({}, appProps, {\n            Component: Component,\n            router: router,\n            apolloClient: apollo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 24\n            },\n            __self: this\n          })));\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error);\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind();\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apollo.cache.extract();\n      return _objectSpread({}, appProps, {\n        apolloState\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo(props.apolloState);\n    }\n\n    render() {\n      return __jsx(App, _extends({}, this.props, {\n        apolloClient: this.apolloClient,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }));\n    }\n\n  }, _defineProperty(_class, \"displayName\", 'withApollo(App)'), _temp;\n});","map":{"version":3,"sources":["/mnt/c/Users/lkkar/Desktop/fe-starter/src/lib/with-apollo-client.js"],"names":["React","initApollo","Head","getDataFromTree","App","Apollo","Component","getInitialProps","ctx","router","appProps","apollo","process","browser","error","console","rewind","apolloState","cache","extract","constructor","props","apolloClient","render"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,eAAT,QAAgC,cAAhC;AAEA,gBAAeC,GAAG,IAAI;AAAA;;AACpB,0BAAO,MAAMC,MAAN,SAAqBL,KAAK,CAACM,SAA3B,CAAqC;AAE1C,iBAAaC,eAAb,CAA8BC,GAA9B,EAAmC;AACjC,YAAM;AAAEF,QAAAA,SAAF;AAAaG,QAAAA;AAAb,UAAwBD,GAA9B;AAEA,UAAIE,QAAQ,GAAG,EAAf;;AACA,UAAIN,GAAG,CAACG,eAAR,EAAyB;AACvBG,QAAAA,QAAQ,GAAG,MAAMN,GAAG,CAACG,eAAJ,CAAoBC,GAApB,CAAjB;AACD,OANgC,CAQjC;AACA;;;AACA,YAAMG,MAAM,GAAGV,UAAU,EAAzB;;AACA,UAAI,CAACW,OAAO,CAACC,OAAb,EAAsB;AACpB,YAAI;AACF;AACA,gBAAMV,eAAe,CACnB,MAAC,GAAD,eACMO,QADN;AAEE,YAAA,SAAS,EAAEJ,SAFb;AAGE,YAAA,MAAM,EAAEG,MAHV;AAIE,YAAA,YAAY,EAAEE,MAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADmB,CAArB;AAQD,SAVD,CAUE,OAAOG,KAAP,EAAc;AACd;AACA;AACA;AACAC,UAAAA,OAAO,CAACD,KAAR,CAAc,uCAAd,EAAuDA,KAAvD;AACD,SAhBmB,CAkBpB;AACA;;;AACAZ,QAAAA,IAAI,CAACc,MAAL;AACD,OAhCgC,CAkCjC;;;AACA,YAAMC,WAAW,GAAGN,MAAM,CAACO,KAAP,CAAaC,OAAb,EAApB;AAEA,+BACKT,QADL;AAEEO,QAAAA;AAFF;AAID;;AAEDG,IAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,YAAMA,KAAN;AACA,WAAKC,YAAL,GAAoBrB,UAAU,CAACoB,KAAK,CAACJ,WAAP,CAA9B;AACD;;AAEDM,IAAAA,MAAM,GAAI;AACR,aAAO,MAAC,GAAD,eAAS,KAAKF,KAAd;AAAqB,QAAA,YAAY,EAAE,KAAKC,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AApDyC,GAA5C,yCACuB,iBADvB;AAsDD,CAvDD","sourcesContent":["import React from 'react'\nimport initApollo from './init-apollo'\nimport Head from 'next/head'\nimport { getDataFromTree } from 'react-apollo'\n\nexport default App => {\n  return class Apollo extends React.Component {\n    static displayName = 'withApollo(App)'\n    static async getInitialProps (ctx) {\n      const { Component, router } = ctx\n      \n      let appProps = {}\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx)\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apollo = initApollo()\n      if (!process.browser) {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <App\n              {...appProps}\n              Component={Component}\n              router={router}\n              apolloClient={apollo}\n            />\n          )\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error)\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind()\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract()\n\n      return {\n        ...appProps,\n        apolloState\n      }\n    }\n\n    constructor (props) {\n      super(props)\n      this.apolloClient = initApollo(props.apolloState)\n    }\n\n    render () {\n      return <App {...this.props} apolloClient={this.apolloClient} />\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}